// Antonio Maldonado
// Generated by Selenium IDE

//Commands to initialize the terminal on Windows
//yarn add chromedriver
//npm install --save-dev mocha
//yarn add --dev mocha

//Add the drivers for Chrome web browser
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')
const chrome = require("selenium-webdriver/chrome")
const chromedriver = require("chromedriver")
chrome.setDefaultService(new chrome.ServiceBuilder(chromedriver.path).build());

describe('Link not working', function() {
  this.timeout(30000)
  let driver
  let vars

  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })//End of beforeEach

  afterEach(async function() {
    await driver.quit();
  })//End of afterEach

  it('failed_login', async function() {

    await driver.get("http://demo.guru99.com/test/newtours/")
    await driver.manage().window().setRect(1440, 1080)

    //Find the element by its xpath
    //The link is found at the bottom right corner of the page
    await driver.findElement(By.xpath("/html/body/div[2]/table/tbody/tr/td[2]/table/tbody/tr[4]/td/table/tbody/tr/td[2]/table/tbody/tr[2]/td[3]/form/table/tbody/tr[12]/td/table/tbody/tr/td/font/a[1]")).click();
  
    //When redirected to the new page, on the same window, look after the h1 by its xpath
    const message = await driver.wait(until.elementLocated(By.xpath("/html/body/h1")), 1500);
    const actualMessage = await message.getText();
    const expectedMessage = "Not Found";

    //We expect to not found a working site, so we compare the message obtained by the h1 and our
    //own message. If both are equal, the test is ok
    assert.equal(actualMessage, expectedMessage, "Incorrect Message");

  })//End of it

})//End of describe
